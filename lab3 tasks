AI LAB3 ACTIVITIES
JEHANZAIB KHATTAK(SP19-BCS-035)

ACTIVITY # 1
class  Node:
    def__init__(self , state , parent , actions , totaLCost):
        self.state = state
        self.parent = parent
        self.actions = actions
        
        self.tatalCost = totalCost
        
        
graph = {'A' : Node('A' , None, ['B' , 'C' , 'E'] , None)
         'B' : Node('B' , None, ['A' , 'D' , 'E'] , None)
         'C' : Node('C' , None, ['A' , 'F' , 'G'] , None)
         'D' : Node('D' , None, ['B' , 'E'] , None)
         'E' : Node('E' , None, ['A' , 'B' , 'D'] , None)
         'F' : Node('F' , None, ['C'] , None)
         'G' : Node('G' , None, ['C'] , None)
        }
        

ACTIVITY # 2

def BFS():
    initialState ='D'
    goalState='F'
    
    graph = {'A' : Node('A' , None, ['B' , 'C' , 'E'] , None)
         'B' : Node('B' , None, ['A' , 'D' , 'E'] , None)
         'C' : Node('C' , None, ['A' , 'F' , 'G'] , None)
         'D' : Node('D' , None, ['B' , 'E'] , None)
         'E' : Node('E' , None, ['A' , 'B' , 'D'] , None)
         'F' : Node('F' , None, ['C'] , None)
         'G' : Node('G' , None, ['C'] , None)
        }
    
    
    frontier=[initialState]
    expored=[]
while len(frontier)!=0:
    currentNode= frontier.pop(0)
    explored.append(currentNode)
    for child in graph[currentNode].actions:
        if child not in frontier and child not in explored:
            graph[child].state==goalState:
                return actionSequence(graph, initialState , goalState)
            frontier.append(child)
    
ACTIVITY # 3

def actionSequence(graph , initialstate , goalState):
    solution=[goalState]
    currentparent=graph[goalState].parent
    while currentparent!=None:
        solution.append(currentparent)
        currentparent=graph[currentparent].parent
    solution.reverse()
    return solution
